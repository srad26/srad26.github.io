{
  "hash": "42e6144908f4a77cb0c0573a4b750772",
  "result": {
    "markdown": "---\nwebsite: \n  title: \"Code Repository\"\n  # navbar:\n  #   background: primary\n  #   search: true\nabout:\n  template: solana\nformat: html\neditor: visual\n# draft: false\nfreeze: true\n---\n\n\n# Welcome to my personal collection of code!\n\nAs I've started to lean into R, I've come to collect a series of files containing code scattered across my laptop. I wanted to create this page so I could have an evergreen collection of my work, available to me or anyone else looking for some accessible code.\n\n### Making Figures Accessible\n\nAccessibility is important in any scientific figure, but not always considered. Please consider the various ways to make your figures more accessible.\n\n#### ***Color-Blind Friendly***\n\nMake your figure color-blind friendly by using [R's Color Brewer](https://r-graph-gallery.com/38-rcolorbrewers-palettes) color pallet.\n\n![](Brewer%20Colorblind%20Friendly.jpeg){width=\"3.35in\"}\n\n### **Making Figures**\n\nI have found [CMplot](https://github.com/YinLiLin/CMplot)and [ggplot2](https://ggplot2.tidyverse.org/)to be very useful programs for creating figures, and you'll notice how I lean into these programs. CMplot is great for making both rectangular and ciruclar Manhattan plots, as well as QQ plots. ggplot2 is incredibly robust and has seemingly endless ways to customize each figure, allowing you to create diverse figures that fit together seamlessly.\n\n#### *Density Plots*\n\n![An example of a density plot created using the code below via [ggplot2](https://ggplot2.tidyverse.org/).](densityplot.JPG){fig-align=\"left\" width=\"4.68in\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##install packages\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\n\n##load libraries\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n##set working directory\n\n##read in data file\ndata<-read.csv(\"data file.csv\", header=TRUE)\n\n##Create density plot\nbasicplot<-ggplot(data, aes(x=xvariable, fill=yvariable)) +geom_density(alpha=0.6)\n\n##Set your Aesthetics\nbasicplot+theme_minimal()+labs(title=\"Title\") +scale_fill_discrete(name=\"legend name\") +theme(text = element_text(size=22)) +scale_fill_brewer(palette = \"GnBu\")\n```\n:::\n\n\n#### *Boxplots*\n\n![An example of a boxplot created using the code below via [ggplot2](https://ggplot2.tidyverse.org/).](boxplotexample.JPG){width=\"3.08in\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##install packages\ninstall.packages(\"ggprism\")\ninstall.packages(\"patchwork\")\ninstall.packages(\"magrittr\")\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"extrafont\")\n\n##load libraries\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(viridis)\nlibrary(magrittr)\nlibrary(ggprism)\nlibrary(patchwork)\nlibrary(ggsignif)\nlibrary(extrafont)\nloadfonts(device=\"win\")\n\n##set working directory\n\n##read in data file and set variables\ndata<-read.csv(\"Inputfile.csv\", header=TRUE)\nXVAR<-data$varaible_A\nYVAR<-data$varaible_B  \nxaxis<-\"x-axis name-variable_A\"\nyaxis<-\"y-axis name-variable_B\"\n\n##calculate median value for later statistics\nmed<-aggregate(XVAR ~ YVAR, data, median)\n\n##create a boxplot\nbasic_plot<-ggplot(data, aes(x=XVAR, y=YVAR, color=YVAR))+geom_boxplot(aes(color=YVAR))+geom_jitter(aes(color=YVAR))+stat_boxplot(mapping=NULL, data=NULL, geom=\"errorbar\", width=0.3)+geom_signif(comparisons=list(c(\"C\", \"T\")), map_signif_level = TRUE, textsize = 12, family = \"TT Times New Roman\", color=\"black\")\n\n\n##perform statistics on the boxplot\nstat_boxplot<-basic_plot+geom_text(data=med, aes(label=XVAR), color=\"black\", size=5 +0.08, vjust=0, family=\"Times New Roman\")\n\n##adjust the limits of the x-axis\nstat_boxplot+xlim(0.0,0.5)\n\n##customize the boxplot with your chosen aestethics \nZZZ<-ZZ+theme_minimal(base_size = 12, base_family = \"TT Times New Roman\")+coord_flip()+labs(x=\"xaxis\", y=\"yaxis\")+scale_color_discrete(\"Allele\")+theme(axis.text.x=element_text(color = \"black\"))+theme(axis.text.y = element_text(color=\"black\"))\n```\n:::\n\n\n#### *Manhattan Plots*\n\n![An example of a manhattan plot made with the code below via [CMplot](https://github.com/YinLiLin/CMplot).](manhattanexample.JPG){width=\"9.17in\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##install packages\ninstall.packages(\"CMplot\")\n\n##load libraries\nlibrary(\"CMplot\")\n\n##set working directory\n\n##read in input file\nY=read.csv(\"inputfile.csv\", header=TRUE)\n\n##create manhattan plot with the significance threshold, and file type of your choice\nCMplot(Y, plot.type=\"m\",threshold=3e-4), file=\"tiff\", file.name=\"filename\", main=\"title\")\n\n##customize the y-axis limits\nylim=c(0,14)\n```\n:::\n\n\n#### ***QQ Plots***\n\n![An example of a QQ plot made with the code below, via [CMplot](https://github.com/YinLiLin/CMplot).](QQexample.JPG){width=\"3.9in\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##install packages\ninstall.packages(\"CMplot\")\n\n##load libraries\nlibrary(\"CMplot\")\n\n##set working directory\n\n##read in input file\nY=read.csv(\"inputfile.csv\", header=TRUE)\n\n##make QQ plot, with threshold, file type, and color of your choice\nCMplot(Y, plot.type=\"q\",threshold=3e-4, file=\"extension_type\", file.name = \"file name\", main = \"title\", dpi=300, col=c(\"goldenrod\"))\n\n##customize the y-axis limits\nylim=c(0,14)\n```\n:::\n\n\n### GWAS Analysis\n\nThere are a number of packages available for GWAS analysis, but I have become fond of the [GAPIT](https://github.com/jiabowang/GAPIT) package. I've used the BLINK method in my own research as it is currently the most powerful computationally and has a lower risk of false positives than other models. You will find the code I used for GWAS analysis via BLINK below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##install packages\ninstall.packages(\"gplots\")\ndevtools::install_github(\"SFUStatgen/LDheatmap\")\ninstall.packages(\"genetics\")\ninstall.packages(\"EMMREML\") \ninstall.packages(\"scatterplot3d\")\ninstall.packages(\"bigmemory\")\ninstall.packages(\"biganalytics\")\n\n##load libraries\nlibrary(gplots) \nlibrary(LDheatmap)\nlibrary(genetics)\nlibrary(EMMREML)\nlibrary(compiler)\nlibrary(scatterplot3d)\nlibrary(bigmemory)\nlibrary(biganalytics)\nsource(\"http://zzlab.net/GAPIT/gapit_functions.txt\")\nsource(\"http://zzlab.net/GAPIT/emma.txt\")\nsource(\"http://zzlab.net/FarmCPU/FarmCPU_functions.txt\")\nsource(\"http://zzlab.net/GAPIT/GAPIT.library.R\")\nsource(\"http://zzlab.net/GAPIT/gapit_functions.txt\")\n\n##set working directory\n\n##read in input file (tab delim.) of genotypic data\nmyG <- read.delim(file.choose(), sep=\"\\t\", header=FALSE) \n\n##make genotypic data numeric\nmyGAPIT <- GAPIT(G=myG, output.numerical=TRUE)\n\n##read in input file (.csv) of phenotypic data\n##ensure the accessions within both phenotypic and genotypic data files are in the same order\nmyY <- read.csv(file.choose(), head = TRUE)\n\n##Perform GWAS analysis\nmyGAPIT_MLM <- GAPIT( Y=myY,G=myG,PCA.total=3,model=c(\"Blink\"),Multiple_analysis=TRUE)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}